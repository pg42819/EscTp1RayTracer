//
// Example ispc file to test compiler
//
#include "ispc_vec.h"
//#include "src/intersect.h"
extern "C" {
unmasked void fooCpp(float *uniform v  /* the data */,
                     int *uniform active /* explicit active mask */,
                     int uniform N);
}

void fooIspc(varying float f)
{
    /* the same stuff we did above: */
    uniform float fArray[programCount];
//    fArray[programCount] = f;

    /* now "construct" an active mask - mind the 'unmasked'!!!! */
    uniform int activeMask[programCount];
    unmasked { activeMask[programIndex] = 0; }
    activeMask[programIndex] = 1;

//    fooCpp(.....);
}

//bool ispc_intersect_triangle(uniform c_vec3f orig, uniform c_vec3f dir, uniform ispc_triangle *triangle,
//                             uniform float *t, float *u, float *v)

//int ispc_intersect_triangle(c_vec3f orig, c_vec3f dir, ispc_triangle *triangle,
int ispc_intersect_triangle(uniform float *t, uniform float *u, uniform float *v)
{
    return 0;
}